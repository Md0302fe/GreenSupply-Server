const FuelStorageReceipt = require("../models/Fuel_Storage_Receipt");
const FuelStorage = require("../models/Fuel_Storage");
const FuelRequest = require("../models/Fuel_Request");
const FuelSupplyOrder = require("../models/Fuel_Supply_Order");
// üü¢ T·∫°o ƒë∆°n nh·∫≠p kho
// const createFuelStorageReceipt = async (manager_id, receipt_supply_id, receipt_request_id) => {
//     try {
//         if (!receipt_supply_id && !receipt_request_id) {
//             throw new Error("Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt ƒë∆°n h√†ng.");
//         }

//         // üü¢ L·∫•y quantity t·ª´ `FuelRequest` ho·∫∑c `FuelSupplyOrder`
//         const quantity = await getQuantityByReceiptId(receipt_supply_id, receipt_request_id);

//         // üü¢ Set c·ª©ng `storage_id` v√¨ ch·ªâ c√≥ 1 kho
//         const storage_id = "67958adf4223924d599a7a41";

//         // üü¢ T·∫°o ƒë∆°n nh·∫≠p kho
//         const newReceipt = new FuelStorageReceipt({
//             manager_id,
//             storage_id,
//             storage_date: new Date(),
//             receipt_supply_id: receipt_supply_id || null,
//             receipt_request_id: receipt_request_id || null,
//             quantity,
//         });

//         return await newReceipt.save();
//     } catch (error) {
//         throw new Error("L·ªói khi t·∫°o ƒë∆°n nh·∫≠p kho: " + error.message);
//     }
// };

const createFuelStorageReceipt = async (manager_id, receipt_supply_id, receipt_request_id) => {
    try {
        if (!receipt_supply_id && !receipt_request_id) {
            throw new Error("Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt ƒë∆°n h√†ng.");
        }

        const quantity = await getQuantityByReceiptId(receipt_supply_id, receipt_request_id);
        const storage_id = "67958adf4223924d599a7a41";

        const newReceipt = new FuelStorageReceipt({
            manager_id,
            storage_id,
            storage_date: new Date(),
            receipt_supply_id: receipt_supply_id || null,
            receipt_request_id: receipt_request_id || null,
            quantity,
        });

        await newReceipt.save();

        // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh "ƒêang x·ª≠ l√Ω"
        if (receipt_request_id) {
            await FuelRequest.findByIdAndUpdate(receipt_request_id, { status: "ƒêang x·ª≠ l√Ω" });
        } else if (receipt_supply_id) {
            await FuelSupplyOrder.findByIdAndUpdate(receipt_supply_id, { status: "ƒêang x·ª≠ l√Ω" });
        }

        return newReceipt;
    } catch (error) {
        throw new Error("L·ªói khi t·∫°o ƒë∆°n nh·∫≠p kho: " + error.message);
    }
};



const getAllFuelStorageReceipts = async (query) => {
    try {
        let { search, status, sortOrder } = query;
        let filter = { is_deleted: false };

        console.log("üì• API nh·∫≠n request:", { search, status, sortOrder });

        // üü¢ 1. Filter - L·ªçc theo tr·∫°ng th√°i ƒë∆°n
        if (status) {
            filter.status = status;
        }

        // üü¢ 2. Sort - S·∫Øp x·∫øp theo `createdAt`
        let sortOptions = { createdAt: sortOrder === "asc" ? 1 : -1 }; // M·∫∑c ƒë·ªãnh m·ªõi nh·∫•t tr∆∞·ªõc

        // üü¢ 3. Query Database (l·∫•y t·∫•t c·∫£ d·ªØ li·ªáu tr∆∞·ªõc)
        let receipts = await FuelStorageReceipt.find(filter)
            .populate("manager_id", "full_name")  // üîπ Ch·ªâ l·∫•y `full_name`
            .populate("storage_id", "name_storage") // üîπ Ch·ªâ l·∫•y `name_storage`
            .populate("receipt_supply_id receipt_request_id")
            .sort(sortOptions);

        console.log("üîç D·ªØ li·ªáu tr∆∞·ªõc khi l·ªçc:", receipts);

if (search) {
    const regexSearch = new RegExp(search, "i"); // Kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
    receipts = receipts.filter(receipt =>
        regexSearch.test(receipt.manager_id?.full_name || "") ||  // üîç T√¨m theo t√™n qu·∫£n l√Ω
        regexSearch.test(receipt.storage_id?.name_storage || "") || // üîç T√¨m theo t√™n kho
        regexSearch.test(receipt.status || "") || // üìå T√¨m theo tr·∫°ng th√°i
        regexSearch.test(receipt.note || "") || // ‚úç T√¨m theo ghi ch√∫
        (receipt.quantity && receipt.quantity.toString().includes(search)) || // üî¢ T√¨m theo s·ªë l∆∞·ª£ng
        regexSearch.test(receipt.receipt_supply_id ? "Cung c·∫•p" : "Thu h√†ng") // üîç T√¨m theo lo·∫°i ƒë∆°n h√†ng
    );
}
        console.log("üîç D·ªØ li·ªáu sau khi l·ªçc:", receipts);

        return receipts;
    } catch (error) {
        throw new Error("L·ªói khi l·∫•y danh s√°ch ƒë∆°n nh·∫≠p kho: " + error.message);
    }
};



const updateFuelStorageReceiptStatus = async (id, status) => {
    try {
        const validStatuses = ["Ch·ªù duy·ªát", "ƒê√£ duy·ªát", "ƒê√£ hu·ª∑"];
        if (!validStatuses.includes(status)) {
            throw new Error("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá!");
        }

        // üü¢ L·∫•y th√¥ng tin ƒë∆°n nh·∫≠p kho
        const receipt = await FuelStorageReceipt.findById(id);
        if (!receipt) {
            throw new Error("Kh√¥ng t√¨m th·∫•y ƒë∆°n nh·∫≠p kho!");
        }

        // üü¢ N·∫øu duy·ªát ƒë∆°n, c·∫≠p nh·∫≠t s·ª©c ch·ª©a kho & tr·∫°ng th√°i ƒë∆°n h√†ng ch·ªù nh·∫≠p kho
        if (status === "ƒê√£ duy·ªát") {
            const storage = await FuelStorage.findById(receipt.storage_id);
            if (!storage) {
                throw new Error("Kh√¥ng t√¨m th·∫•y kho!");
            }

            // üü¢ Ki·ªÉm tra s·ª©c ch·ª©a kho
            if (receipt.quantity > storage.remaining_capacity) {
                throw new Error("Kho kh√¥ng ƒë·ªß s·ª©c ch·ª©a!");
            }

            // üü¢ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng trong kho
            storage.remaining_capacity -= receipt.quantity;
            await storage.save();

            // üü¢ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng ch·ªù nh·∫≠p kho th√†nh "Nh·∫≠p kho th√†nh c√¥ng"
            await updateOrderStatus(receipt.receipt_supply_id || receipt.receipt_request_id, "Nh·∫≠p kho th√†nh c√¥ng");
        }

        // üü¢ N·∫øu h·ªßy ƒë∆°n nh·∫≠p kho, c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng ch·ªù nh·∫≠p kho th√†nh "Nh·∫≠p kho th·∫•t b·∫°i"
        if (status === "ƒê√£ hu·ª∑") {
            await updateOrderStatus(receipt.receipt_supply_id || receipt.receipt_request_id, "Nh·∫≠p kho th·∫•t b·∫°i");
        }

        // üü¢ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n nh·∫≠p kho
        receipt.status = status;
        await receipt.save();

        return receipt;
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n nh·∫≠p kho:", error.message);
        throw new Error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i: " + error.message);
    }
};

// üü¢ H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i trong `FuelRequest` ho·∫∑c `FuelSupplyOrder`
const updateOrderStatus = async (orderId, newStatus) => {
    try {
        const order = await FuelRequest.findById(orderId) || await FuelSupplyOrder.findById(orderId);
        if (!order) throw new Error("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ch·ªù nh·∫≠p kho!");

        order.status = newStatus;
        await order.save();
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng ch·ªù nh·∫≠p kho:", error.message);
        throw new Error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng: " + error.message);
    }
};



  

  const getQuantityByReceiptId = async (receipt_supply_id, receipt_request_id) => {
    try {
        if (receipt_supply_id) {
            const supplyOrder = await FuelSupplyOrder.findById(receipt_supply_id);
            if (!supplyOrder) throw new Error("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng cung c·∫•p!");
            return supplyOrder.quantity;
        }

        if (receipt_request_id) {
            const requestOrder = await FuelRequest.findById(receipt_request_id);
            if (!requestOrder) throw new Error("Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu nh·∫≠p h√†ng!");
            return requestOrder.quantity;
        }

        throw new Error("Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt ƒë∆°n h√†ng (supply ho·∫∑c request).");
    } catch (error) {
        throw new Error("L·ªói khi l·∫•y s·ªë l∆∞·ª£ng nhi√™n li·ªáu: " + error.message);
    }
};


const getFuelStorageById = async (storage_id) => {
    try {
        const storage = await FuelStorage.findById(storage_id);
        if (!storage) {
            throw new Error("Kh√¥ng t√¨m th·∫•y kho!");
        }
        return storage;
    } catch (error) {
        throw new Error("L·ªói khi l·∫•y th√¥ng tin kho: " + error.message);
    }
};





module.exports = { createFuelStorageReceipt, getAllFuelStorageReceipts, updateFuelStorageReceiptStatus, getQuantityByReceiptId, getFuelStorageById  };
