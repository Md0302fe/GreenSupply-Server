const FuelStorageReceipt = require("../models/Fuel_Storage_Receipt");
const FuelStorage = require("../models/Fuel_Storage");
// üü¢ T·∫°o ƒë∆°n nh·∫≠p kho
const createFuelStorageReceipt = async (manager_id, receipt_supply_id, receipt_request_id) => {
    try {
        if (!receipt_supply_id && !receipt_request_id) {
            throw new Error("Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt ƒë∆°n h√†ng.");
        }

        // üü¢ Set c·ª©ng `storage_id` v√¨ ch·ªâ c√≥ 1 kho
        const storage_id = "67958adf4223924d599a7a41";

        // üü¢ T·∫°o ƒë∆°n nh·∫≠p kho
        const newReceipt = new FuelStorageReceipt({
            manager_id,
            storage_id,
            storage_date: new Date(),
            receipt_supply_id: receipt_supply_id || null,
            receipt_request_id: receipt_request_id || null,
        });

        return await newReceipt.save();
    } catch (error) {
        throw new Error("L·ªói khi t·∫°o ƒë∆°n nh·∫≠p kho: " + error.message);
    }
};

const getAllFuelStorageReceipts = async () => {
  try {
      return await FuelStorageReceipt.find({ is_deleted: false })
          .populate("manager_id storage_id receipt_supply_id receipt_request_id");
  } catch (error) {
      throw new Error("L·ªói khi l·∫•y danh s√°ch ƒë∆°n nh·∫≠p kho: " + error.message);
  }
};

const updateFuelStorageReceiptStatus = async (id, status) => {
  try {
      // Ki·ªÉm tra tr·∫°ng th√°i h·ª£p l·ªá
      const validStatuses = ["Ch·ªù duy·ªát", "ƒê√£ duy·ªát", "ƒê√£ hu·ª∑"];
      if (!validStatuses.includes(status)) {
          throw new Error("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá!");
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
      const updatedReceipt = await FuelStorageReceipt.findByIdAndUpdate(
          id,
          { status },
          { new: true }
      );

      if (!updatedReceipt) {
          throw new Error("Kh√¥ng t√¨m th·∫•y ƒë∆°n nh·∫≠p kho!");
      }

      return updatedReceipt;
  } catch (error) {
      throw new Error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i: " + error.message);
  }
};


module.exports = { createFuelStorageReceipt, getAllFuelStorageReceipts, updateFuelStorageReceiptStatus };
