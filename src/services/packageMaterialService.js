const Box = require("../models/Package_Material");
const BoxCategory = require("../models/Package_Material_Categorie");
const storage_id = "665480f9bde459d62ca7d001";
// Box Category Services
const createBoxCategory = async (data) => {
  const newCategory = new BoxCategory({ ...data, quantity: 0 });
  return await newCategory.save();
};

const updateBoxCategory = async (id, data) => {
  return await BoxCategory.findByIdAndUpdate(id, data, { new: true });
};

const deleteBoxCategory = async (id) => {
  return await BoxCategory.findByIdAndUpdate(id, { is_delete: true });
};

const getBoxCategories = async (includeInactive = false) => {
  const filter = {};
  if (!includeInactive) {
    filter.is_delete = false; // Ch·ªâ l·∫•y nh·ªØng c√°i ch∆∞a xo√°
  }
  return await BoxCategory.find(filter);
};

// Box Services
const createBox = async (data) => {
  const {
    package_material_name,
    package_material_categories,
    quantity,
    package_img,
    type,
    capacity,
    dimensions, // { length, width, height }
  } = data;

  const { length, width, height = 1 } = dimensions;

  // ‚úÖ 1. Ph√¢n lo·∫°i size theo k√≠ch th∆∞·ªõc
  let size_category = "ch∆∞a x√°c ƒë·ªãnh";

  if (type === "t√∫i ch√¢n kh√¥ng") {
    const area = length * width;
    if (area <= 250) size_category = "nh·ªè";
    else if (area <= 400) size_category = "trung b√¨nh";
    else size_category = "l·ªõn";
  } else if (type === "th√πng carton") {
    const volume = length * width * height;
    if (volume <= 9000) size_category = "nh·ªè";
    else if (volume <= 17000) size_category = "trung b√¨nh";
    else size_category = "l·ªõn";
  }

  // ‚úÖ 2. Ki·ªÉm tra capacity h·ª£p l√Ω v·ªõi size
  const limits = {
    "t√∫i ch√¢n kh√¥ng": {
      nh·ªè: 200,         // g
      "trung b√¨nh": 500,
      l·ªõn: 1000,
    },
    "th√πng carton": {
      nh·ªè: 3.5,         // kg
      "trung b√¨nh": 7,
      l·ªõn: 10,
    },
  };

  const limit = limits[type]?.[size_category];
  if (limit && capacity > limit) {
    throw new Error(
      `Dung t√≠ch ${capacity}${type === "t√∫i ch√¢n kh√¥ng" ? "g" : "kg"} v∆∞·ª£t qu√° m·ª©c cho ph√©p v·ªõi size ${size_category.toUpperCase()} (${limit}${type === "t√∫i ch√¢n kh√¥ng" ? "g" : "kg"}).`
    );
  }

  // ‚úÖ 3. T·∫°o box m·ªõi
  const newBox = new Box({
    package_material_name,
    package_material_categories,
    quantity,
    package_img,
    type,
    capacity,
    storage_id,
    dimensions: { length, width, height },
    size_category,
  });

  const savedBox = await newBox.save();

  // ‚úÖ 4. C·∫≠p nh·∫≠t t·ªïng quantity c·ªßa lo·∫°i
  await BoxCategory.findByIdAndUpdate(package_material_categories, {
    $inc: { quantity },
  });

  return savedBox;
};


const updateBox = async (id, data) => {
  const existingBox = await Box.findById(id);
  if (!existingBox) {
    throw new Error("Kh√¥ng t√¨m th·∫•y th√πng ƒë·ªÉ c·∫≠p nh·∫≠t");
  }

  // L·∫•y s·ªë l∆∞·ª£ng c≈© v√† m·ªõi
  const oldQuantity = existingBox.quantity;
  const newQuantity =
    typeof data.quantity === "number" ? data.quantity : oldQuantity;
  const quantityDiff = newQuantity - oldQuantity;

  // C·∫≠p nh·∫≠t th√¥ng tin box (k·ªÉ c·∫£ t√™n, ·∫£nh, m√¥ t·∫£...)
  const updatedBox = await Box.findByIdAndUpdate(
    id,
    {
      ...data,
      quantity: newQuantity,
    },
    { new: true }
  );
  const categoryId =
    updatedBox.package_material_categories?._id ||
    updatedBox.package_material_categories;

  // N·∫øu c√≥ thay ƒë·ªïi v·ªÅ s·ªë l∆∞·ª£ng, c·∫≠p nh·∫≠t t·ªïng s·ªë l∆∞·ª£ng trong category
  if (quantityDiff !== 0) {
    await BoxCategory.findByIdAndUpdate(categoryId, {
      $inc: { quantity: quantityDiff },
    });
  }

  return updatedBox;
};

const deleteBox = async (id) => {
  const box = await Box.findById(id);
  if (!box || box.is_delete) {
    throw new Error("Kh√¥ng t√¨m th·∫•y box ho·∫∑c box ƒë√£ b·ªã x√≥a");
  }
  // ƒê√°nh d·∫•u x√≥a
  await Box.findByIdAndUpdate(id, { is_delete: true });

  // Tr·ª´ s·ªë l∆∞·ª£ng c·ªßa box kh·ªèi t·ªïng quantity category
  await BoxCategory.findByIdAndUpdate(box.package_material_categories, {
    $inc: { quantity: -box.quantity },
  });
};

const getBoxes = async (categoryId) => {
  const filter = { is_delete: false };
  if (categoryId) {
    filter.package_material_categories = categoryId;
  }

  const boxes = await Box.find(filter).populate("package_material_categories");

  // ü™Ñ G·∫Øn th√™m size_label theo size_category
  const mappedBoxes = boxes.map((box) => {
    let sizeLabel = "Kh√¥ng r√µ";
    switch (box.size_category) {
      case "nh·ªè":
        sizeLabel = "Size S";
        break;
      case "trung b√¨nh":
        sizeLabel = "Size M";
        break;
      case "l·ªõn":
        sizeLabel = "Size L";
        break;
    }
    return {
      ...box.toObject(), // tr·∫£ v·ªÅ object th∆∞·ªùng ƒë·ªÉ d·ªÖ append field m·ªõi
      size_label: sizeLabel,
    };
  });

  return mappedBoxes;
};

// Inventory operations
const importBox = async (id, quantity) => {
  const box = await Box.findByIdAndUpdate(
    id,
    { $inc: { quantity } },
    { new: true }
  );
  await BoxCategory.findByIdAndUpdate(box.package_material_categories, {
    $inc: { quantity },
  });
  return box;
};

const exportBox = async (id, quantity) => {
  const box = await Box.findById(id);
  if (!box || box.quantity < quantity) {
    throw new Error("Kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng ƒë·ªÉ xu·∫•t kho");
  }
  box.quantity -= quantity;
  await box.save();
  await BoxCategory.findByIdAndUpdate(box.package_material_categories, {
    $inc: { quantity: -quantity },
  });
  return box;
};



module.exports = {
  createBoxCategory,
  updateBoxCategory,
  deleteBoxCategory,
  getBoxCategories,
  createBox,
  updateBox,
  deleteBox,
  getBoxes,
  importBox,
  exportBox,
};
