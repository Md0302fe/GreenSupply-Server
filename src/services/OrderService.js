const FuelRequest = require("../models/Fuel_Request");
const FuelSupplyOrder = require("../models/Fuel_Supply_Order");
const mongoose = require("mongoose");

///GetAll c·∫£ 2 b·∫£ng 
// const getAllApprovedRequests = async () => {
//   try {
//     // L·∫•y danh s√°ch t·ª´ b·∫£ng FuelRequest (Y√™u c·∫ßu thu h√†ng)
//     const approvedFuelRequests = await FuelRequest.find({
//       status: "ƒê√£ duy·ªát",
//       is_deleted: false,
//     })
//       .populate("supplier_id")
//       .lean(); // Chuy·ªÉn d·ªØ li·ªáu t·ª´ mongoose document sang object thu·∫ßn

//     // L·∫•y danh s√°ch t·ª´ b·∫£ng FuelSupplyOrder (ƒê∆°n cung c·∫•p nhi√™n li·ªáu)
//     const approvedFuelSupplyOrders = await FuelSupplyOrder.find({
//       status: "ƒê√£ duy·ªát",
//       is_deleted: false,
//     })
//       .populate("supplier_id request_id")
//       .lean();
    
//     // üü¢ Th√™m `receipt_type` v√†o t·ª´ng ƒë∆°n h√†ng v√† ƒë·ªïi tr·∫°ng th√°i th√†nh "Ch·ªù Nh·∫≠p Kho"
//     const formattedFuelRequests = approvedFuelRequests.map((order) => ({
//       ...order,
//       receipt_type: "request", // ƒê√°nh d·∫•u ƒë√¢y l√† ƒë∆°n thu h√†ng
//       status: "Ch·ªù Nh·∫≠p Kho",  // ‚úÖ ƒê·ªïi tr·∫°ng th√°i ngay t·∫°i ƒë√¢y
//     }));

//     const formattedFuelSupplyOrders = approvedFuelSupplyOrders.map((order) => ({
//       ...order,
//       receipt_type: "supply", // ƒê√°nh d·∫•u ƒë√¢y l√† ƒë∆°n cung c·∫•p nhi√™n li·ªáu
//       status: "Ch·ªù Nh·∫≠p Kho",  // ‚úÖ ƒê·ªïi tr·∫°ng th√°i ngay t·∫°i ƒë√¢y
//     }));

//     // G·ªôp k·∫øt qu·∫£ t·ª´ c·∫£ hai b·∫£ng
//     const allApprovedOrders = [...formattedFuelRequests, ...formattedFuelSupplyOrders];

//     return {
//       success: true,
//       data: allApprovedOrders,
//     };
//   } catch (error) {
//     throw error;
//   }
// };


const getAllApprovedRequests = async () => {
  try {
      const approvedFuelRequests = await FuelRequest.find({
          status: { $in: ["ƒê√£ duy·ªát"] }, 
          is_deleted: false,
      }).populate("supplier_id").lean();

      const approvedFuelSupplyOrders = await FuelSupplyOrder.find({
          status: { $in: ["ƒê√£ duy·ªát"] }, 
          is_deleted: false,
      }).populate("supplier_id request_id").lean();

      const formattedFuelRequests = approvedFuelRequests.map(order => ({
          ...order,
          status: order.status === "ƒê√£ duy·ªát" ? "Ch·ªù Nh·∫≠p Kho" : "ƒêang x·ª≠ l√Ω", 
          receipt_type: "request",
      }));

      const formattedFuelSupplyOrders = approvedFuelSupplyOrders.map(order => ({
          ...order,
          status: order.status === "ƒê√£ duy·ªát" ? "Ch·ªù Nh·∫≠p Kho" : "ƒêang x·ª≠ l√Ω", 
          receipt_type: "supply",
      }));

      const allApprovedOrders = [...formattedFuelRequests, ...formattedFuelSupplyOrders];

      return { success: true, data: allApprovedOrders };
  } catch (error) {
      throw error;
  }
};



const getAllProvideOrders = async (filters) => {
  try {
    let query = { is_deleted: false };

    if (filters.search) {
      query.$or = [
        { fuel_name: { $regex: filters.search, $options: "i" } },
        { address: { $regex: filters.search, $options: "i" } }
      ];
    }

    if (filters.status) {
      query.status = filters.status;
    }

    if (filters.priority) {
      query.priority = Number(filters.priority);
    }

    if (filters.priceMin || filters.priceMax) {
      query.price = {};
      if (filters.priceMin) query.price.$gte = Number(filters.priceMin);
      if (filters.priceMax) query.price.$lte = Number(filters.priceMax);
    }

    if (filters.quantityMin || filters.quantityMax) {
      query.quantity = {};
      if (filters.quantityMin) query.quantity.$gte = Number(filters.quantityMin);
      if (filters.quantityMax) query.quantity.$lte = Number(filters.quantityMax);
    }

    const requests = await FuelSupplyOrder.find(query)
      .populate("supplier_id", "full_name email phone")
      .sort({ createdAt: -1 });

    return {
      status: "L·∫•y danh s√°ch y√™u c·∫ßu thu h√†ng th√†nh c√¥ng!",
      requests,
    };
  } catch (error) {
    throw new Error(error.message);
  }
};

/// L·∫•y t·∫•t c·∫£ c√°c y√™u c·∫ßu thu h√†ng t·ª´ b·∫£ng FuelRequest
const getAllApprovedFuelRequests = async () => {
  try {
    const approvedFuelRequests = await FuelRequest.find({
      status: "ƒê√£ duy·ªát",
      is_deleted: false,
    })
      .populate("supplier_id")
      .lean();

    // üü¢ Th√™m `receipt_type`
    const formattedRequests = approvedFuelRequests.map((order) => ({
      ...order,
      receipt_type: "request",
       status: "Ch·ªù Nh·∫≠p Kho",
    }));

    return {
      success: true,
      data: formattedRequests,
    };
  } catch (error) {
    throw error;
  }
};


/// L·∫•y t·∫•t c·∫£ c√°c ƒë∆°n cung c·∫•p nhi√™n li·ªáu t·ª´ b·∫£ng FuelSupplyOrder
const getAllApprovedFuelSupplyOrders = async () => {
  try {
    const approvedFuelSupplyOrders = await FuelSupplyOrder.find({
      status: "ƒê√£ duy·ªát",
      is_deleted: false,
    })
      .populate("supplier_id request_id")
      .lean();

    // üü¢ Th√™m `receipt_type`
    const formattedSupplyOrders = approvedFuelSupplyOrders.map((order) => ({
      ...order,
      receipt_type: "supply",
       status: "Ch·ªù Nh·∫≠p Kho",
    }));

    return {
      success: true,
      data: formattedSupplyOrders,
    };
  } catch (error) {
    throw error;
  }
};

const updateOrderStatus = async (req, res) => {
  try {
      const { id } = req.params; // ID ƒë∆°n h√†ng t·ª´ URL
      const { status } = req.body; // Tr·∫°ng th√°i m·ªõi t·ª´ request body

      // Ki·ªÉm tra tr·∫°ng th√°i h·ª£p l·ªá
      const validStatuses = ["Ch·ªù Nh·∫≠p Kho", "ƒêang x·ª≠ l√Ω", "ƒê√£ ho√†n th√†nh"];
      if (!validStatuses.includes(status)) {
          return res.status(400).json({ success: false, message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá!" });
      }

      // Ki·ªÉm tra xem ƒë∆°n h√†ng t·ªìn t·∫°i kh√¥ng
      let order = await FuelRequest.findById(id);
      if (!order) {
          order = await FuelSupplyOrder.findById(id);
      }

      if (!order) {
          return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!" });
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
      order.status = status;
      await order.save();

      return res.status(200).json({ success: true, message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!", data: order });
  } catch (error) {
      return res.status(500).json({ success: false, message: "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i!", error: error.message });
  }
};

const SupplierOrderDashboard = async () => {

  const totalFuelRequests = await FuelRequest.countDocuments({ is_deleted: false });
  const totalFuelSupplyOrders = await FuelSupplyOrder.countDocuments({ is_deleted: false });

  const pendingFuelRequests = await FuelRequest.countDocuments({ status: "Ch·ªù duy·ªát", is_deleted: false });
  const pendingFuelSupplyOrders = await FuelSupplyOrder.countDocuments({ status: "Ch·ªù duy·ªát", is_deleted: false });

  const approvedFuelRequests = await FuelRequest.countDocuments({ status: "ƒê√£ duy·ªát", is_deleted: false });
  const approvedFuelSupplyOrders = await FuelSupplyOrder.countDocuments({ status: "ƒê√£ duy·ªát", is_deleted: false });

  const completedFuelRequests = await FuelRequest.countDocuments({ status: "Ho√†n th√†nh", is_deleted: false });
  const completedFuelSupplyOrders = await FuelSupplyOrder.countDocuments({ status: "Ho√†n th√†nh", is_deleted: false });


  return {
      // T·ªïng h·ª£p t·∫•t c·∫£ d·ªØ li·ªáu c·ªßa 2 b·∫£ng
    totalFuelRequests,
    totalFuelSupplyOrders,
    pendingRequests: pendingFuelRequests + pendingFuelSupplyOrders,
    approvedRequests: approvedFuelRequests + approvedFuelSupplyOrders,
    totalCompleted: completedFuelRequests + completedFuelSupplyOrders,

    // Chi ti·∫øt t·ª´ng b·∫£ng
    fuelRequests: {
      total: totalFuelRequests,
      pending: pendingFuelRequests,
      approved: approvedFuelRequests,
      completed: completedFuelRequests
    },
    fuelSupplyOrders: {
      total: totalFuelSupplyOrders,
      pending: pendingFuelSupplyOrders,
      approved: approvedFuelSupplyOrders,
      completed: completedFuelSupplyOrders
    }
  };
};


const getProvideOrderHistories = async (user_id) => {
  try {

    // cast id to objectId before compare with data in mgdb
    const objectUserId = new mongoose.Types.ObjectId(user_id.user_id);

    // const requests = await FuelSupplyOrder.find({status : "Ho√†n Th√†nh"})
    const requests = await FuelSupplyOrder.find({
      supplier_id : objectUserId,
      is_deleted : false 
    })
      .populate("supplier_id", "full_name email phone")
      .sort({ createdAt: -1 });

    console.log("provide orders => ", requests)
    return {
      status: "L·∫•y danh s√°ch y√™u c·∫ßu thu h√†ng th√†nh c√¥ng!",
      requests,
    };
  } catch (error) {
    throw new Error(error.message);
  }
};

module.exports = { 
  getAllApprovedFuelRequests, 
  getAllApprovedRequests,
  getAllApprovedFuelSupplyOrders,
  getAllProvideOrders,
  updateOrderStatus,
  SupplierOrderDashboard,
  getProvideOrderHistories
  // getAllorderbySucess
};
