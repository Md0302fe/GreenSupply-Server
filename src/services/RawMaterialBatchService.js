const RawMaterialBatch = require("../models/Raw_Material_Batch");
const Storage = require("../models/Storage");
const ProductionRequest = require("../models/Production_Request");
const PackageMaterial = require("../models/Package_Material");
const mongoose = require("mongoose");

const getAllStorages = async () => {
  try {
    const storages = await Storage.find({}, "_id name_storage");
    return {
      success: true,
      message: "L·∫•y danh s√°ch kho l∆∞u tr·ªØ th√†nh c√¥ng!",
      data: storages,
    };
  } catch (error) {
    throw new Error(error.message);
  }
};

const generateBatchId = (prefix = "XMTH") => {
  const today = new Date();
  const year = today.getFullYear();
  const month = String(today.getMonth() + 1).padStart(2, "0"); // ƒê·ªãnh d·∫°ng 2 s·ªë
  const day = String(today.getDate()).padStart(2, "0"); // ƒê·ªãnh d·∫°ng 2 s·ªë

  const batchNumber = Math.floor(Math.random() * 1000)
    .toString()
    .padStart(3, "0");

  return `${prefix}${day}${month}${year}-${batchNumber}`;
};

const create = async (batchData) => {
  try {
    const newBatch = await RawMaterialBatch.create(batchData);

    if (!newBatch) {
      return {
        success: false,
        message: "T·∫°o l√¥ nguy√™n li·ªáu th·∫•t b·∫°i!",
        batch: newBatch,
      };
    }
    return {
      success: true,
      message: "T·∫°o l√¥ nguy√™n li·ªáu th√†nh c√¥ng!",
      batch: newBatch,
    };
  } catch (error) {
    throw new Error(error.message);
  }
};

const getAll = async (filters) => {
  try {
    const requests = await RawMaterialBatch.find()
      .populate({
        path: "fuel_type_id",
        populate: {
          path: "storage_id",
        },
      })
      .populate({
        path: "fuel_type_id",
        populate: {
          path: "fuel_type_id",
        },
      })
      .sort({ createdAt: -1 });

    return {
      success: true,
      status: "L·∫•y danh s√°ch l√¥ nguy√™n li·ªáu th√†nh c√¥ng!",
      requests,
    };
  } catch (error) {
    throw new Error(error.message);
  }
};

const getById = async (id) => {
  try {
    const batch = await RawMaterialBatch.findById(id).populate({
      path: "fuel_type_id",
      populate: [{ path: "storage_id" }, { path: "fuel_type_id" }],
    });

    if (!batch) {
      throw new Error("Kh√¥ng t√¨m th·∫•y l√¥ nguy√™n li·ªáu!");
    }

    return {
      success: true,
      status: "L·∫•y chi ti·∫øt l√¥ nguy√™n li·ªáu th√†nh c√¥ng!",
      batch,
    };
  } catch (error) {
    throw new Error(error.message);
  }
};
const getBatchByRequestId = async (id) => {
  try {
    const batches = await RawMaterialBatch.find({
      production_request_id: id,
    })
      .populate({
        path: "fuel_type_id",
        populate: [
          { path: "storage_id" },
          { path: "fuel_type_id" }, 
        ],
      })
      .populate("production_request_id");
    if (!batches || batches.length === 0) {
      throw new Error("Kh√¥ng t√¨m th·∫•y l√¥ nguy√™n li·ªáu!");
    }

    return {
      success: true,
      status: "L·∫•y l√¥ nguy√™n li·ªáu th√†nh c√¥ng!",
      batches,
    };
  } catch (error) {
    console.error(
      "üî• L·ªói trong RawMaterialBatchService.getBatchByRequestId:",
      error
    );
    throw new Error(error.message);
  }
};

const update = async (id, data) => {
  try {
    // Ki·ªÉm tra xem fuel_type_id c√≥ h·ª£p l·ªá kh√¥ng (n·∫øu l√† ObjectId th√¨ kh√¥ng c·∫ßn ki·ªÉm tra)
    if (!mongoose.Types.ObjectId.isValid(data._id)) {
      throw new Error("Fuel type ID kh√¥ng h·ª£p l·ªá!");
    }
    // Ki·ªÉm tra xem storage_id c√≥ h·ª£p l·ªá kh√¥ng
    if (data.storage_id && !mongoose.Types.ObjectId.isValid(data.storage_id)) {
      throw new Error("Storage ID kh√¥ng h·ª£p l·ªá!");
    }

    // C·∫≠p nh·∫≠t l√¥ nguy√™n li·ªáu
    const updated = await RawMaterialBatch.findByIdAndUpdate(
      id,
      { ...data, updatedAt: new Date() },
      { new: true }
    )
      .populate({
        path: "fuel_type_id",
        populate: {
          path: "storage_id",
        },
      })
      .populate({
        path: "fuel_type_id",
        populate: {
          path: "fuel_type_id",
        },
      });

    if (!updated) {
      throw new Error("Kh√¥ng t√¨m th·∫•y l√¥ nguy√™n li·ªáu!");
    }

    return {
      success: true,
      message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
      data: updated,
    };
  } catch (error) {
    throw new Error(error.message);
  }
};

// const cancel = async (id) => {
//   try {
//     const canceled = await RawMaterialBatch.findByIdAndUpdate(
//       id,
//       { is_deleted: true, updatedAt: new Date() },
//       { new: true }
//     );

//     if (!canceled) {
//       throw new Error("Kh√¥ng t√¨m th·∫•y nhi√™n li·ªáu!");
//     }

//     return {
//       success: true,
//       message: "ƒê√£ ƒë√°nh d·∫•u nhi√™n li·ªáu l√† 'ƒê√£ x√≥a'!",
//       data: canceled,
//     };
//   } catch (error) {
//     throw new Error(error.message);
//   }
// };

const updateStatus = async (id, status) => {
  try {
    const validStatuses = [
      "ƒêang chu·∫©n b·ªã",
      "Ch·ªù xu·∫•t kho",
      "ƒê√£ xu·∫•t kho",
      "H·ªßy b·ªè",
    ];
    if (!validStatuses.includes(status)) {
      throw new Error("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá!");
    }

    const updated = await RawMaterialBatch.findByIdAndUpdate(
      id,
      { status, updatedAt: new Date() },
      { new: true }
    );

    if (!updated) {
      throw new Error("Kh√¥ng t√¨m th·∫•y l√¥ nguy√™n li·ªáu!");
    }

    return {
      success: true,
      message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!",
      data: updated,
    };
  } catch (error) {
    throw new Error(error.message);
  }
};

const getTotalRawMaterialBatches = async () => {
  try {
    // L·∫•y t·ªïng s·ªë l√¥ nguy√™n li·ªáu
    const totalBatches = await RawMaterialBatch.countDocuments({
      is_deleted: false,
    });

    // L·∫•y ng√†y s·ªõm nh·∫•t v√† mu·ªôn nh·∫•t t·ª´ database
    const startDateRecord = await RawMaterialBatch.findOne({
      is_deleted: false,
    })
      .sort({ createdAt: 1 })
      .select("createdAt");
    const endDateRecord = await RawMaterialBatch.findOne({ is_deleted: false })
      .sort({ createdAt: -1 })
      .select("createdAt");

    if (!startDateRecord || !endDateRecord) {
      throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu l√¥ nguy√™n li·ªáu");
    }

    const startDate = startDateRecord.createdAt;
    const endDate = endDateRecord.createdAt;

    // ƒê·ªãnh d·∫°ng l·∫°i ng√†y theo chu·ªói
    const startFormatted = `${new Date(startDate).getDate()} th√°ng ${
      new Date(startDate).getMonth() + 1
    }`;
    const endFormatted = `${new Date(endDate).getDate()} th√°ng ${
      new Date(endDate).getMonth() + 1
    }`;

    const dateRange = `T·ª´ ${startFormatted} - ${endFormatted}`;

    // Tr·∫£ v·ªÅ c·∫£ t·ªïng s·ªë l√¥ v√† kho·∫£ng th·ªùi gian
    return { totalBatches, dateRange };
  } catch (error) {
    throw new Error(
      "L·ªói khi l·∫•y t·ªïng s·ªë l√¥ nguy√™n li·ªáu v√† kho·∫£ng th·ªùi gian: " + error.message
    );
  }
};

module.exports = {
  getAllStorages,
  generateBatchId,
  create,
  getAll,
  getById,
  update,
  // cancel,
  getBatchByRequestId,
  updateStatus,
  getTotalRawMaterialBatches,
};
